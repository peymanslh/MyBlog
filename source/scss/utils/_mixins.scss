// generate gallery-item width
@mixin gallery_width($columns) {
  @for $i from 1 through $columns {
    &.gallery-columns-#{$i} {
      .gallery-item {
        width: (100% / $i);
      }
    }
  }
}

//generate custom color for button
@mixin btn_color($color) {
  background-color: #ffffff;
  color: $color !important;
  border: 1px solid $color;

  &:hover {
    background-color: darken($color, 5%);
    color: #ffffff !important;
  }

  &:active,
    //  &:focus
  {
    background-color: darken($color, 10%);
    box-shadow: 0 7px 20px -6px #616161 inset;
  }
  &.active {
    background-color: darken($color, 10%);
    box-shadow: 0 7px 20px -6px #616161 inset;
  }
}

//generate custom color for alerts

@mixin alert_color($color: #000000) {
  border-color: $color;
}

//generate custom background color for progress-bar

@mixin progress-color($color: $blue) {
  background-color: $color;
}

//generate custom colors for tooltip's box and the texts. we use it without argumant for default color
@mixin applyColor($color: $tooltipColor, $textColor: $tooltipTextColor) {
  @each $position in top, bottom, left, right {
    &.simptip-position-#{$position} {
      &:before {
        border-#{$position}-color: $color;
      }
      &:after {
        background-color: $color;
        color: $textColor;
      }
    }
  }
  @each $position in top, bottom {
    &.simptip-position-#{$position} {
      &.half-arrow {
        &:before {
          border-right: $arrowSize+1px solid $color;
        }
      }
    }
  }
}

@mixin border-radius($radius: 4px) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
}

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model;
  -moz-box-sizing: $box-model;
  box-sizing: $box-model;
}

@mixin transition($transition...) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
  -ms-transition: $transition;
  transition: $transition;
}

@mixin fade($duration: 0.2s) {
  @include transition(opacity $duration linear, visibility $duration linear);
}

@mixin transform($string) {
  -webkit-transform: $string;
  -moz-transform: $string;
  -ms-transform: $string;
  -o-transform: $string;
  transform: $string;
}

//generate multiline tooltips
@mixin multiline($width: 150px, $align: left) {
  height: auto;
  width: $width;
  padding: $tooltipHeight/2;
  line-height: $tooltipHeight - 3px;
  white-space: normal;
  text-align: $align;
}

// Bootstrap
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left: ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: $float;
    padding-left: ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-#{$float}: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, offset);
}

//clearfix
@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

@mixin container() {
  margin-right: auto;
  margin-left: auto;
  padding-left: ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  max-width: 100%;

  @include clearfix;
}

@mixin gen_row() {
  margin-left: -($grid-gutter-width / 2);
  margin-right: -($grid-gutter-width / 2);
  @include clearfix;
}

@mixin create_show($class) {
  .show-#{$class} {
    display: block !important;
  }
}

@mixin create_hide($class) {
  .hide-#{$class} {
    display: none !important;
  }
}
